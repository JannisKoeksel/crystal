type Citation implements Node {
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A condition to be used against `Citation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CitationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int
}

"""A connection to a list of `Citation` values."""
type CitationsConnection {
  """
  A list of edges which contains the `Citation` and cursor to aid in pagination.
  """
  edges: [CitationsEdge]!

  """A list of `Citation` objects."""
  nodes: [Citation]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Citation` you could get from the connection."""
  totalCount: Int!
}

"""A `Citation` edge in the connection."""
type CitationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Citation` at the end of the edge."""
  node: Citation
}

"""Methods to use when ordering `Citation`."""
enum CitationsOrderBy {
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Citation` mutation."""
input CreateCitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Citation` mutation."""
type CreateCitationPayload {
  """The `Citation` that was created by this mutation."""
  citation: Citation

  """An edge for our `Citation`. May be used by Relay 1."""
  citationEdge(
    """The method to use when ordering `Citation`."""
    orderBy: [CitationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CitationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteCitationById` mutation."""
input DeleteCitationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCitation` mutation."""
input DeleteCitationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Citation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Citation` mutation."""
type DeleteCitationPayload {
  """The `Citation` that was deleted by this mutation."""
  citation: Citation

  """An edge for our `Citation`. May be used by Relay 1."""
  citationEdge(
    """The method to use when ordering `Citation`."""
    orderBy: [CitationsOrderBy!]! = [PRIMARY_KEY_ASC]
  ): CitationsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCitationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Citation`."""
  createCitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCitationInput!
  ): CreateCitationPayload

  """Deletes a single `Citation` using its globally unique id."""
  deleteCitation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCitationInput!
  ): DeleteCitationPayload

  """Deletes a single `Citation` using a unique key."""
  deleteCitationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCitationByIdInput!
  ): DeleteCitationPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Citation`."""
  allCitations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CitationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Citation`."""
    orderBy: [CitationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CitationsConnection

  """Reads a single `Citation` using its globally unique `ID`."""
  citation(
    """The globally unique `ID` to be used in selecting a single `Citation`."""
    nodeId: ID!
  ): Citation

  """Get a single `Citation`."""
  citationById(id: Int!): Citation

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
}
